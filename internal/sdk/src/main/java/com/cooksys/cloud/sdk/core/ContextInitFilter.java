package com.cooksys.cloud.sdk.core;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import com.cooksys.cloud.commons.SharedConstants;
import com.cooksys.cloud.sdk.CloudRequestContext;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Grabs the contextId generated by the edge server from the header, and sets
 * the contextId for this request, as well as sets it in the loggerContext, so
 * all logs associated with this request contain the contextId
 *
 * @author Tim Davidson
 */
public class ContextInitFilter implements Filter {

    private final Logger logger = (Logger) LoggerFactory.getLogger(this.getClass());
    private final LoggerContext loggerContext = logger.getLoggerContext();

    @Autowired
    private CloudRequestContext requestContext;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {

        // Get the contextId from the request header and set it in the context -
        // (router's RoutingFilter adds this header)
        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;
        String contextId = httpRequest.getHeader(SharedConstants.CLOUD_HDR_CONTEXT_ID);

        if (contextId != null) {
            requestContext.setContextId(contextId);
            loggerContext.putProperty(SharedConstants.CONTEXT_ID, contextId);

            // put the contextId in the response headers
            HttpServletResponse httpResponse = (HttpServletResponse) servletResponse;
            httpResponse.addHeader(SharedConstants.CLOUD_HDR_CONTEXT_ID, contextId);
        }

        filterChain.doFilter(servletRequest, servletResponse);
    }

    @Override
    public void destroy() {

    }
}
